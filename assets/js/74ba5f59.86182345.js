"use strict";(self.webpackChunkcspr_docs_redux=self.webpackChunkcspr_docs_redux||[]).push([[42518],{77636:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"jsonrpc-comp/rpc-2.0/schema/PricingMode.json","title":"PricingMode.json","description":"","source":"@site/condor/jsonrpc-comp/rpc-2.0/schema/PricingMode.json.md","sourceDirName":"jsonrpc-comp/rpc-2.0/schema","slug":"/jsonrpc-comp/rpc-2.0/schema/PricingMode.json","permalink":"/condor/jsonrpc-comp/rpc-2.0/schema/PricingMode.json","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=t(74848),o=t(28453);const s={},c=void 0,a={},p=[];function d(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:"copy ",children:'{\n    "description": "Pricing mode of a Transaction.",\n    "oneOf": [\n        {\n            "description": "The original payment model, where the creator of the transaction specifies how much they will pay, at what gas price.",\n            "type": "object",\n            "required": [\n                "Classic"\n            ],\n            "properties": {\n                "Classic": {\n                    "type": "object",\n                    "required": [\n                        "gas_price_tolerance",\n                        "payment_amount",\n                        "standard_payment"\n                    ],\n                    "properties": {\n                        "payment_amount": {\n                            "description": "User-specified payment amount.",\n                            "type": "integer",\n                            "format": "uint64",\n                            "minimum": 0\n                        },\n                        "gas_price_tolerance": {\n                            "description": "User-specified gas_price tolerance (minimum 1). This is interpreted to mean \\"do not include this transaction in a block if the current gas price is greater than this number\\"",\n                            "type": "integer",\n                            "format": "uint8",\n                            "minimum": 0\n                        },\n                        "standard_payment": {\n                            "description": "Standard payment.",\n                            "type": "boolean"\n                        }\n                    },\n                    "additionalProperties": false\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "The cost of the transaction is determined by the cost table, per the transaction category.",\n            "type": "object",\n            "required": [\n                "Fixed"\n            ],\n            "properties": {\n                "Fixed": {\n                    "type": "object",\n                    "required": [\n                        "gas_price_tolerance"\n                    ],\n                    "properties": {\n                        "gas_price_tolerance": {\n                            "description": "User-specified gas_price tolerance (minimum 1). This is interpreted to mean \\"do not include this transaction in a block if the current gas price is greater than this number\\"",\n                            "type": "integer",\n                            "format": "uint8",\n                            "minimum": 0\n                        }\n                    },\n                    "additionalProperties": false\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "The payment for this transaction was previously reserved, as proven by the receipt hash (this is for future use, not currently implemented).",\n            "type": "object",\n            "required": [\n                "Reserved"\n            ],\n            "properties": {\n                "Reserved": {\n                    "type": "object",\n                    "required": [\n                        "receipt"\n                    ],\n                    "properties": {\n                        "receipt": {\n                            "description": "Pre-paid receipt.",\n                            "allOf": [\n                                {\n                                    "$ref": "#/components/schemas/Digest"\n                                }\n                            ]\n                        }\n                    },\n                    "additionalProperties": false\n                }\n            },\n            "additionalProperties": false\n        }\n    ]\n} \n'})})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(96540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);