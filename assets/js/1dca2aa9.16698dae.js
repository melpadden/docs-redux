"use strict";(self.webpackChunkcspr_docs_redux=self.webpackChunkcspr_docs_redux||[]).push([[84941],{38369:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"jsonrpc-comp/rpc-2.0/schema/ContractPackage.json","title":"ContractPackage.json","description":"","source":"@site/condor/jsonrpc-comp/rpc-2.0/schema/ContractPackage.json.md","sourceDirName":"jsonrpc-comp/rpc-2.0/schema","slug":"/jsonrpc-comp/rpc-2.0/schema/ContractPackage.json","permalink":"/condor/jsonrpc-comp/rpc-2.0/schema/ContractPackage.json","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var o=s(74848),c=s(28453);const r={},a=void 0,i={},p=[];function d(n){const e={code:"code",pre:"pre",...(0,c.R)(),...n.components};return(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",metastring:"copy ",children:'{\n    "description": "Contract definition, metadata, and security container.",\n    "type": "object",\n    "required": [\n        "access_key",\n        "disabled_versions",\n        "groups",\n        "lock_status",\n        "versions"\n    ],\n    "properties": {\n        "access_key": {\n            "description": "Key used to add or disable versions",\n            "allOf": [\n                {\n                    "$ref": "#/components/schemas/URef"\n                }\n            ]\n        },\n        "versions": {\n            "description": "All versions (enabled & disabled)",\n            "type": "array",\n            "items": {\n                "$ref": "#/components/schemas/ContractVersion"\n            }\n        },\n        "disabled_versions": {\n            "description": "Disabled versions",\n            "type": "array",\n            "items": {\n                "$ref": "#/components/schemas/ContractVersionKey"\n            },\n            "uniqueItems": true\n        },\n        "groups": {\n            "description": "Mapping maintaining the set of URefs associated with each \\"user group\\". This can be used to control access to methods in a particular version of the contract. A method is callable by any context which \\"knows\\" any of the URefs associated with the method\'s user group.",\n            "allOf": [\n                {\n                    "$ref": "#/components/schemas/Array_of_NamedUserGroup"\n                }\n            ]\n        },\n        "lock_status": {\n            "description": "A flag that determines whether a contract is locked",\n            "allOf": [\n                {\n                    "$ref": "#/components/schemas/ContractPackageStatus"\n                }\n            ]\n        }\n    }\n} \n'})})}function u(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>a});var t=s(96540);const o={},c=t.createContext(o);function r(n){const e=t.useContext(c);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),t.createElement(c.Provider,{value:e},n.children)}}}]);