"use strict";(self.webpackChunkcspr_docs_redux=self.webpackChunkcspr_docs_redux||[]).push([[15435],{50809:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>p,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"jsonrpc-comp/rpc-2.0/schema/CLType.json","title":"CLType.json","description":"","source":"@site/condor/jsonrpc-comp/rpc-2.0/schema/CLType.json.md","sourceDirName":"jsonrpc-comp/rpc-2.0/schema","slug":"/jsonrpc-comp/rpc-2.0/schema/CLType.json","permalink":"/condor/jsonrpc-comp/rpc-2.0/schema/CLType.json","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=t(74848),s=t(28453);const p={},o=void 0,a={},c=[];function d(n){const e={code:"code",pre:"pre",...(0,s.R)(),...n.components};return(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",metastring:"copy ",children:'{\n    "description": "Casper types, i.e. types which can be stored and manipulated by smart contracts.\\n\\nProvides a description of the underlying data type of a [`CLValue`](crate::CLValue).",\n    "oneOf": [\n        {\n            "description": "`bool` primitive.",\n            "type": "string",\n            "enum": [\n                "Bool"\n            ]\n        },\n        {\n            "description": "`i32` primitive.",\n            "type": "string",\n            "enum": [\n                "I32"\n            ]\n        },\n        {\n            "description": "`i64` primitive.",\n            "type": "string",\n            "enum": [\n                "I64"\n            ]\n        },\n        {\n            "description": "`u8` primitive.",\n            "type": "string",\n            "enum": [\n                "U8"\n            ]\n        },\n        {\n            "description": "`u32` primitive.",\n            "type": "string",\n            "enum": [\n                "U32"\n            ]\n        },\n        {\n            "description": "`u64` primitive.",\n            "type": "string",\n            "enum": [\n                "U64"\n            ]\n        },\n        {\n            "description": "[`U128`] large unsigned integer type.",\n            "type": "string",\n            "enum": [\n                "U128"\n            ]\n        },\n        {\n            "description": "[`U256`] large unsigned integer type.",\n            "type": "string",\n            "enum": [\n                "U256"\n            ]\n        },\n        {\n            "description": "[`U512`] large unsigned integer type.",\n            "type": "string",\n            "enum": [\n                "U512"\n            ]\n        },\n        {\n            "description": "`()` primitive.",\n            "type": "string",\n            "enum": [\n                "Unit"\n            ]\n        },\n        {\n            "description": "`String` primitive.",\n            "type": "string",\n            "enum": [\n                "String"\n            ]\n        },\n        {\n            "description": "[`Key`] system type.",\n            "type": "string",\n            "enum": [\n                "Key"\n            ]\n        },\n        {\n            "description": "[`URef`] system type.",\n            "type": "string",\n            "enum": [\n                "URef"\n            ]\n        },\n        {\n            "description": "[`PublicKey`](crate::PublicKey) system type.",\n            "type": "string",\n            "enum": [\n                "PublicKey"\n            ]\n        },\n        {\n            "description": "`Option` of a `CLType`.",\n            "type": "object",\n            "required": [\n                "Option"\n            ],\n            "properties": {\n                "Option": {\n                    "$ref": "#/components/schemas/CLType"\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "Variable-length list of a single `CLType` (comparable to a `Vec`).",\n            "type": "object",\n            "required": [\n                "List"\n            ],\n            "properties": {\n                "List": {\n                    "$ref": "#/components/schemas/CLType"\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "Fixed-length list of a single `CLType` (comparable to a Rust array).",\n            "type": "object",\n            "required": [\n                "ByteArray"\n            ],\n            "properties": {\n                "ByteArray": {\n                    "type": "integer",\n                    "format": "uint32",\n                    "minimum": 0\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "`Result` with `Ok` and `Err` variants of `CLType`s.",\n            "type": "object",\n            "required": [\n                "Result"\n            ],\n            "properties": {\n                "Result": {\n                    "type": "object",\n                    "required": [\n                        "err",\n                        "ok"\n                    ],\n                    "properties": {\n                        "ok": {\n                            "$ref": "#/components/schemas/CLType"\n                        },\n                        "err": {\n                            "$ref": "#/components/schemas/CLType"\n                        }\n                    },\n                    "additionalProperties": false\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "Map with keys of a single `CLType` and values of a single `CLType`.",\n            "type": "object",\n            "required": [\n                "Map"\n            ],\n            "properties": {\n                "Map": {\n                    "type": "object",\n                    "required": [\n                        "key",\n                        "value"\n                    ],\n                    "properties": {\n                        "key": {\n                            "$ref": "#/components/schemas/CLType"\n                        },\n                        "value": {\n                            "$ref": "#/components/schemas/CLType"\n                        }\n                    },\n                    "additionalProperties": false\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "1-ary tuple of a `CLType`.",\n            "type": "object",\n            "required": [\n                "Tuple1"\n            ],\n            "properties": {\n                "Tuple1": {\n                    "type": "array",\n                    "items": {\n                        "$ref": "#/components/schemas/CLType"\n                    },\n                    "maxItems": 1,\n                    "minItems": 1\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "2-ary tuple of `CLType`s.",\n            "type": "object",\n            "required": [\n                "Tuple2"\n            ],\n            "properties": {\n                "Tuple2": {\n                    "type": "array",\n                    "items": {\n                        "$ref": "#/components/schemas/CLType"\n                    },\n                    "maxItems": 2,\n                    "minItems": 2\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "3-ary tuple of `CLType`s.",\n            "type": "object",\n            "required": [\n                "Tuple3"\n            ],\n            "properties": {\n                "Tuple3": {\n                    "type": "array",\n                    "items": {\n                        "$ref": "#/components/schemas/CLType"\n                    },\n                    "maxItems": 3,\n                    "minItems": 3\n                }\n            },\n            "additionalProperties": false\n        },\n        {\n            "description": "Unspecified type.",\n            "type": "string",\n            "enum": [\n                "Any"\n            ]\n        }\n    ]\n} \n'})})}function m(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>p,x:()=>o});var r=t(96540);const i={},s=r.createContext(i);function p(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:p(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);